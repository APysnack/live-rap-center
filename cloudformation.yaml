Parameters:
  ECSClusterName:
    Type: String
    Default: lrc_cluster

  LoadBalancerName:
    Type: String
    Default: lrc-load-balancer

  AWSDefaultRegion:
    Type: String
    Default: us-east-1

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.14.0.0/16

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: LiveRapCenterVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [1, !Cidr [!Ref VpcCIDR, 8, 13]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: liverapcenter-app-az-a

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [2, !Cidr [!Ref VpcCIDR, 8, 13]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: liverapcenter-app-az-b

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [3, !Cidr [!Ref VpcCIDR, 8, 13]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: liverapcenter-app-az-c

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: LiveRapCenterIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: LiveRapCenterRouteTable

  RouteToInternet:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  AssociateRouteTable1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref MyRouteTable

  AssociateRouteTable2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref MyRouteTable

  AssociateRouteTable3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref MyRouteTable

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - Description: 'Allow ECS to communicate with DB'
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt ServiceSG.GroupId
        - Description: 'Allow local ip to communicate with DB'
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 98.204.58.188/32

  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the load balancer
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  ServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the service
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId

  MyDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: lrc-subnet-group
      DBSubnetGroupDescription: Live Rap Center Subnet Group
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3

  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: AttachGateway
    Properties:
      AllocatedStorage: '20'
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CopyTagsToSnapshot: false
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: liverapcenterdb
      DBName: liverapcenterdb
      Engine: postgres
      MasterUsername: postgres
      MasterUserPassword: password
      MultiAZ: false
      # TODO: Set to false in production
      PubliclyAccessible: true
      StorageType: gp2
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      # Prevents DB from taking a snapshot every time you delete CFN stack
      DBSnapshotIdentifier: ''

  RdsEndpointParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: '/live-rap-center/prod/AWS_RDS_HOST'
      Type: 'String'
      Value: !GetAtt MyRDSInstance.Endpoint.Address

  RdsNameParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: '/live-rap-center/prod/AWS_RDS_NAME'
      Type: 'String'
      Value: !Ref MyRDSInstance

  RdsPortParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: '/live-rap-center/prod/AWS_RDS_PORT'
      Type: 'String'
      Value: !GetAtt MyRDSInstance.Endpoint.Port

  RdsUsernameParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: '/live-rap-center/prod/AWS_RDS_USERNAME'
      Type: 'String'
      Value: postgres

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: lrc_cluster
      CapacityProviders:
        - FARGATE

  ECSExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ECSExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AdminPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'

  ECSTaskDefinition:
    DependsOn:
      - RdsEndpointParameter
      - RdsNameParameter
      - RdsPortParameter
      - RdsUsernameParameter
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: launch_lrc_container
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      Cpu: '1024'
      Memory: '3072'
      RequiresCompatibilities:
        - FARGATE
      # name must match the "name" in buildspec.yml imagedefinitions.json
      ContainerDefinitions:
        - Name: lrc_server
          Image: 655948565243.dkr.ecr.us-east-1.amazonaws.com/lrc_server:latest
          Cpu: 1024
          Memory: 3072
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/launch_lrc_container
              awslogs-region: !Ref AWSDefaultRegion
              awslogs-stream-prefix: ecs
              awslogs-create-group: 'true'
          Environment:
            - Name: RAILS_LOG_TO_STDOUT
              Value: arn:aws:ssm:us-east-1:655948565243:parameter/live-rap-center/prod/RAILS_LOG_TO_STDOUT
          Secrets:
            - Name: RAILS_ENV
              ValueFrom: arn:aws:ssm:us-east-1:655948565243:parameter/live-rap-center/prod/RAILS_ENV
            - Name: AWS_RDS_HOST
              ValueFrom: arn:aws:ssm:us-east-1:655948565243:parameter/live-rap-center/prod/AWS_RDS_HOST
            - Name: AWS_RDS_USERNAME
              ValueFrom: arn:aws:ssm:us-east-1:655948565243:parameter/live-rap-center/prod/AWS_RDS_USERNAME
            - Name: AWS_RDS_PASSWORD
              ValueFrom: arn:aws:ssm:us-east-1:655948565243:parameter/live-rap-center/prod/AWS_RDS_PASSWORD
            - Name: AWS_RDS_NAME
              ValueFrom: arn:aws:ssm:us-east-1:655948565243:parameter/live-rap-center/prod/AWS_RDS_NAME
            - Name: AWS_RDS_PORT
              ValueFrom: arn:aws:ssm:us-east-1:655948565243:parameter/live-rap-center/prod/AWS_RDS_PORT
            - Name: VOTES_UNTIL_BATTLE_CLOSED
              ValueFrom: arn:aws:ssm:us-east-1:655948565243:parameter/live-rap-center/prod/VOTES_UNTIL_BATTLE_CLOSED
            - Name: SERVER_URL
              ValueFrom: arn:aws:ssm:us-east-1:655948565243:parameter/live-rap-center/prod/SERVER_URL
            - Name: YT_VIDEO_API
              ValueFrom: arn:aws:ssm:us-east-1:655948565243:parameter/live-rap-center/prod/YT_VIDEO_API
            - Name: YT_CHANNEL_API
              ValueFrom: arn:aws:ssm:us-east-1:655948565243:parameter/live-rap-center/prod/YT_CHANNEL_API
            - Name: YT_PLAYLIST_API
              ValueFrom: arn:aws:ssm:us-east-1:655948565243:parameter/live-rap-center/prod/YT_PLAYLIST_API
            - Name: TWITTER_BEARER_TOKEN
              ValueFrom: arn:aws:ssm:us-east-1:655948565243:parameter/live-rap-center/prod/TWITTER_BEARER_TOKEN
            - Name: YT_API_KEY
              ValueFrom: arn:aws:ssm:us-east-1:655948565243:parameter/live-rap-center/prod/YT_API_KEY
            - Name: SECRET_KEY_BASE
              ValueFrom: arn:aws:ssm:us-east-1:655948565243:parameter/live-rap-center/prod/SECRET_KEY_BASE

  ECSService:
    DependsOn: MyRDSInstance
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSClusterName
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 0
          Weight: 1
      TaskDefinition: !Ref ECSTaskDefinition
      ServiceName: lrc-server-svc
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      LoadBalancers:
        # TODO: reference lrc_server in container definitions
        - ContainerName: lrc_server
          ContainerPort: 3000
          LoadBalancerName: !Ref AWS::NoValue
          TargetGroupArn: !Ref TargetGroup
      HealthCheckGracePeriodSeconds: 60
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt ServiceSG.GroupId
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
            - !Ref PublicSubnet3
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      Tags: []
      EnableECSManagedTags: true
    DependsOn:
      - Listener

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: lrc-load-balancer
      SecurityGroups:
        - !GetAtt LoadBalancerSG.GroupId
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /healthcheck
      Name: lrc-target-group
      Port: 80
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      VpcId: !Ref MyVPC

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: 'arn:aws:acm:us-east-1:655948565243:certificate/0105b726-dbc5-460a-a3e0-02435f050418'

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 3
      MinCapacity: 1
      ResourceId: 'service/lrc_cluster/lrc-server-svc'
      RoleARN: 'arn:aws:iam::655948565243:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    DependsOn:
      - ECSService

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: lrcPolicy
      PolicyType: TargetTrackingScaling
      ResourceId: 'service/lrc_cluster/lrc-server-svc'
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  LoadBalancerRoute:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: 'Z02616981L01DPKMGQGTT' # ID for LRC's hosted zone
      Name: 'loadbalancer.liverapcenter.com'
      Type: 'A'
      AliasTarget:
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt LoadBalancer.DNSName

  CodePipelineBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: lrc-codepipeline-artifacts

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: lrc-build-test
      Description: lrc codebuild project
      Source:
        Type: CODEPIPELINE
      # TODO: use param store for env vars
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWSDefaultRegion
          - Name: AWS_ACCOUNT_ID
            Value: '655948565243'
          - Name: IMAGE_TAG
            Value: latest
          - Name: IMAGE_REPO_NAME
            Value: lrc_server
          - Name: REACT_APP_SERVER_URL
            Value: https://loadbalancer.liverapcenter.com
          - Name: REACT_APP_GOOGLE_CLIENT_ID
            Value: 663794386212-nc788e9q2plahisjo63vo352vlplocpe.apps.googleusercontent.com
          - Name: REACT_APP_GATEWAY_SOCKET_URL
            Value: wss://r5gucpaple.execute-api.us-east-1.amazonaws.com/production
          - Name: S3_BUCKET_NAME
            Value: !Ref StaticWebsiteBucket
          - Name: CLOUDFRONT_ID
            Value: !GetAtt CloudFrontDistribution.Id
      Artifacts:
        Type: CODEPIPELINE
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: lrc-build-logs
          StreamName: lrc-build-log-stream
      ServiceRole: !GetAtt CodeBuildRole.Arn

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LRCCodeBuildRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECRS3PermissionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - cloudfront:CreateInvalidation
                Resource: '*'

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LRCCodePipelineRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
                - elasticbeanstalk.amazonaws.com
                - ec2.amazonaws.com
                - ecs-tasks.amazonaws.com
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole

  CodePipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: policy
      Roles:
        - !Ref CodePipelineRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - iam:PassRole
            Resource: '*'
            Effect: Allow
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
                  - elasticbeanstalk.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
          - Action:
              - elasticbeanstalk:*
              - ec2:*
              - elasticloadbalancing:*
              - autoscaling:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - cloudformation:*
              - rds:*
              - sqs:*
              - ecs:*
            Resource: '*'
            Effect: Allow
          - Action:
              - codecommit:CancelUploadArchive
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:GetRepository
              - codecommit:GetUploadArchiveStatus
              - codecommit:UploadArchive
              - codestar-connections:UseConnection
              - codedeploy:CreateDeployment
              - codedeploy:GetApplication
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
              - lambda:InvokeFunction
              - lambda:ListFunctions
              - opsworks:CreateDeployment
              - opsworks:DescribeApps
              - opsworks:DescribeCommands
              - opsworks:DescribeDeployments
              - opsworks:DescribeInstances
              - opsworks:DescribeStacks
              - opsworks:UpdateApp
              - opsworks:UpdateStack
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:BatchGetBuildBatches
              - codebuild:StartBuildBatch
              - devicefarm:ListProjects
              - devicefarm:ListDevicePools
              - devicefarm:GetRun
              - devicefarm:GetUpload
              - devicefarm:CreateUpload
              - devicefarm:ScheduleRun
              - servicecatalog:ListProvisioningArtifacts
              - servicecatalog:CreateProvisioningArtifact
              - servicecatalog:DescribeProvisioningArtifact
              - servicecatalog:DeleteProvisioningArtifact
              - servicecatalog:UpdateProduct
              - cloudformation:ValidateTemplate
              - ecr:DescribeImages
              - states:DescribeExecution
              - states:DescribeStateMachine
              - states:StartExecution
              - appconfig:StartDeployment
              - appconfig:StopDeployment
              - appconfig:GetDeployment
            Effect: Allow
            Resource: '*'

  MyCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RestartExecutionOnUpdate: true
      Name: lrc-test-pipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: 'arn:aws:codestar-connections:us-east-1:655948565243:connection/c047b5b5-7cb2-46ae-ae4c-95e3fb4ed1d8'
                FullRepositoryId: 'APysnack/live-rap-center'
                BranchName: 'main'
                DetectChanges: true
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
                # TODO: ProjectName is hardcoded
              Configuration:
                ProjectName: lrc-build-test
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
        - Name: Deploy
          Actions:
            - Name: ECSDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: ECS
              Configuration:
                ClusterName: !Ref ECSCluster
                ServiceName: !Ref ECSService
                FileName: imagedefinitions.json
                DeploymentTimeout: 15
              InputArtifacts:
                - Name: BuildArtifact

  CodeBuildPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref CodeBuildRole
      PolicyName: CodeBuildPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:CreateLogStream
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl
              - s3:GetBucketLocation
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
              - kms:Decrypt
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
              - codebuild:BatchPutCodeCoverages
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSecurityGroupReferences
              - ec2:DescribeSecurityGroupRules
              - ec2:DescribeSubnets
              - ec2:CreateNetworkInterface
              - ec2:DescribeDhcpOptions
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:DescribeVpcs
              - ec2:DescribeInstances
              - ec2:DescribeKeyPairs
              - ec2:DescribeRouteTables
              - ec2:DescribeNetworkAcls
              - ec2:CreateTags

  StaticWebsiteBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: liverapcenter-static-website
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: Default Origin Access Control
        Name: OriginAccessControl
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
          - Id: StaticWebsiteBucket
            DomainName: !GetAtt StaticWebsiteBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            # TODO: replace HeaderValue
            OriginCustomHeaders:
              - HeaderName: X-LiveRapCircle-Header
                HeaderValue: placeholderValues
        Enabled: true
        HttpVersion: http2and3
        Aliases:
          - liverapcenter.com
        DefaultRootObject: /index.html
        IPV6Enabled: true
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:655948565243:certificate/70e0acd5-f72e-4c50-984b-1e194d99a38f
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 10
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: StaticWebsiteBucket
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          ViewerProtocolPolicy: redirect-to-https
          Compress: true

  StaticWebsiteBucketPolicy:
    DependsOn:
      - CloudFrontDistribution
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref StaticWebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: 'LRCStaticWebsiteBucketPolicy'
        Statement:
          - Sid: 'AllowCloudFrontServicePrincipal'
            Effect: Allow
            Principal:
              Service: 'cloudfront.amazonaws.com'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${StaticWebsiteBucket}/*'
            Condition:
              StringEquals:
                'aws:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  DNSRecord:
    DependsOn: CloudFrontDistribution
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: 'Z02616981L01DPKMGQGTT' # ID for lrc's hosted zone
      Name: 'liverapcenter.com'
      Type: 'A'
      AliasTarget:
        # CloudFront specific value
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt CloudFrontDistribution.DomainName
